class Solution {
public:
    double separateSquares(vector<vector<int>>& squares) {
       
        auto area_above = [&](double y_mid) {
           
        double total = 0;
        for (auto& square : squares) {
            long long x = square[0], y = square[1], l = square[2];
            long long top = y + l;
           
            if (y_mid >= top) continue;  // Entire square is below
            if (y_mid <= y) total += (double)l * l;  // Entire square is above
            else total += (top - y_mid) * l;  // Partial area above
        }
        return total;
    };
   
    double y_low = squares[0][1], y_high = squares[0][1] + squares[0][2];

    double total_area = 0;
    for (auto& square : squares) {
        y_low = min(y_low, (double)square[1]);
        y_high = max(y_high, (double)(square[1] + square[2]));
        total_area += (double)square[2] * square[2];
    }
    double half_area = total_area / 2;
    
    // Binary search for y_mid
    double eps = 1e-5;
    while (y_high - y_low > eps) {
        double y_mid = (y_low + y_high) / 2.0;
        if (area_above(y_mid) > half_area) y_low = y_mid;
        else y_high = y_mid;
    }
   
    return round(y_low * 100000) / 100000;
}
};Â©leetcode