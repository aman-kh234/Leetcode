int n = s.size(), m = p.size();
    int f = -1, sec = -1;

    for (int i = 0; i < m; i++) {
        if (p[i] == '*') {
            if (f == -1) f = i;
            else { sec = i; break; }
        }
    }

    if (f == -1 || sec == -1) return -1;

    string pre = p.substr(0, f);
    string mid = p.substr(f + 1, sec - f - 1);
    string suf = p.substr(sec + 1);

    int preL = pre.size(), midL = mid.size(), sufL = suf.size();
    vector<int> prePos, midPos, sufPos;

    for (int i = 0; i + preL <= n; i++)
        if (s.compare(i, preL, pre) == 0) prePos.push_back(i);

    for (int i = 0; i + midL <= n; i++)
        if (s.compare(i, midL, mid) == 0) midPos.push_back(i);
 for (int i = 0; i + sufL <= n; i++)
        if (s.compare(i, sufL, suf) == 0) sufPos.push_back(i);

    int minLen = INT_MAX;

    for (int st : prePos) {
        auto midIt = lower_bound(midPos.begin(), midPos.end(), st + preL);
        if (midIt == midPos.end()) break;
        int midSt = *midIt;

        auto sufIt = lower_bound(sufPos.begin(), sufPos.end(), midSt + midL);
        if (sufIt == sufPos.end()) break;
        int sufSt = *sufIt;

        minLen = min(minLen, sufSt + sufL - st);
    }

    return minLen == INT_MAX ? -1 : minLen;